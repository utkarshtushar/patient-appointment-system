# Production API Testing Guide - Patient Appointment System

## üöÄ Production Environment
- **Base URL**: https://utkarsh-appointment-system.herokuapp.com
- **Database**: PostgreSQL (Heroku Postgres)
- **Architecture**: Spring Boot microservices (Redis/RabbitMQ disabled for free tier)

## üîç Pre-Deployment Testing Checklist

### Core Functionality Tests
‚úÖ User registration and authentication
‚úÖ JWT token generation and validation
‚úÖ Role-based access control (Patient/Doctor/Admin)
‚úÖ Appointment slot generation and booking
‚úÖ Database persistence with PostgreSQL
‚úÖ Health monitoring endpoints
‚úÖ CORS and security headers

### Production-Ready Features
‚úÖ Graceful Redis/RabbitMQ fallbacks
‚úÖ Database connection pooling
‚úÖ Error handling and logging
‚úÖ Environment-based configuration
‚úÖ Free tier optimization

---

## üß™ Complete Testing Workflow

### Phase 1: Health Check
```bash
# Test 1: Application Health
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/actuator/health"
# Expected: {"status":"UP","components":{"db":{"status":"UP"}}}

# Test 2: Basic connectivity
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/test"
# Expected: "Hello from Patient Appointment System!"
```

### Phase 2: User Registration & Authentication
```bash
# Test 3: Register Patient
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testpatient@example.com",
    "password": "test123",
    "firstName": "Test",
    "lastName": "Patient",
    "phoneNumber": "+1234567890",
    "role": "PATIENT"
  }'
# Expected: User registration success response

# Test 4: Register Doctor
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testdoctor@example.com",
    "password": "test123",
    "firstName": "Dr. Test",
    "lastName": "Doctor",
    "phoneNumber": "+1234567891",
    "role": "DOCTOR",
    "specialization": "General Medicine"
  }'
# Expected: Doctor registration success response

# Test 5: Patient Login
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testpatient@example.com",
    "password": "test123"
  }'
# Expected: JWT token in response - SAVE THIS TOKEN!

# Test 6: Doctor Login
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testdoctor@example.com",
    "password": "test123"
  }'
# Expected: JWT token in response - SAVE THIS TOKEN!
```

### Phase 3: Appointment System Tests
```bash
# Test 7: Get Available Slots (Public endpoint - no auth)
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/appointments/slots/available?doctorId=1&startDate=2025-09-06&endDate=2025-09-13" \
  -H "Content-Type: application/json"
# Expected: List of available appointment slots

# Test 8: Book Appointment (Patient auth required)
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/appointments/book" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [PATIENT_JWT_TOKEN]" \
  -d '{
    "slotId": 1,
    "patientNotes": "Regular checkup"
  }'
# Expected: Appointment booking confirmation

# Test 9: View Patient Appointments
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/appointments/patient/my-appointments" \
  -H "Authorization: Bearer [PATIENT_JWT_TOKEN]"
# Expected: List of patient's appointments

# Test 10: View Doctor Appointments
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/appointments/doctor/my-appointments" \
  -H "Authorization: Bearer [DOCTOR_JWT_TOKEN]"
# Expected: List of doctor's appointments
```

### Phase 4: Security & Access Control Tests
```bash
# Test 11: Unauthorized access (should fail)
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/appointments/patient/my-appointments"
# Expected: 401 Unauthorized

# Test 12: Wrong role access (should fail)
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/admin/users" \
  -H "Authorization: Bearer [PATIENT_JWT_TOKEN]"
# Expected: 403 Forbidden

# Test 13: Expired token handling
# (Use an old/invalid token)
curl -X GET "https://utkarsh-appointment-system.herokuapp.com/api/appointments/patient/my-appointments" \
  -H "Authorization: Bearer invalid_token_here"
# Expected: 401 Unauthorized
```

---

## üìä Expected Performance Metrics

### Response Times (Production)
- Health check: < 2 seconds
- Authentication: < 3 seconds
- Available slots: < 5 seconds
- Book appointment: < 5 seconds
- Database queries: < 2 seconds

### Database Performance
- Connection pool: HikariCP optimized
- Query optimization: Indexed on doctor_id, slot_date
- Migration: Auto-applied via Hibernate DDL

---

## üö® Error Scenarios & Handling

### Test Error Conditions
```bash
# Test 14: Duplicate email registration
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testpatient@example.com",
    "password": "test123",
    "firstName": "Duplicate",
    "lastName": "User",
    "role": "PATIENT"
  }'
# Expected: 400 Bad Request - Email already exists

# Test 15: Invalid login credentials
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testpatient@example.com",
    "password": "wrongpassword"
  }'
# Expected: 401 Unauthorized

# Test 16: Book unavailable slot
curl -X POST "https://utkarsh-appointment-system.herokuapp.com/api/appointments/book" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [PATIENT_JWT_TOKEN]" \
  -d '{
    "slotId": 999999,
    "patientNotes": "Test booking"
  }'
# Expected: 400 Bad Request - Slot not found or unavailable
```

---

## üîß Production Verification Checklist

### ‚úÖ Infrastructure
- [x] Heroku dyno running
- [x] PostgreSQL database connected
- [x] Environment variables set
- [x] HTTPS enabled
- [x] Health monitoring active

### ‚úÖ Security
- [x] JWT authentication working
- [x] Role-based access control
- [x] CORS properly configured
- [x] Security headers enabled
- [x] Sensitive data encrypted

### ‚úÖ Core Features
- [x] User registration/login
- [x] Appointment booking
- [x] Slot availability check
- [x] Database persistence
- [x] Error handling

### ‚úÖ Free Tier Optimizations
- [x] Redis disabled (in-memory fallback)
- [x] RabbitMQ disabled (sync processing)
- [x] Connection pooling optimized
- [x] Database queries efficient

---

## üìà Monitoring & Alerts

### Key Metrics to Monitor
- Application uptime
- Response times
- Database connection health
- Error rates
- Memory usage

### Heroku Monitoring Commands
```bash
# Check application logs
heroku logs --tail --app utkarsh-appointment-system

# Check dyno status
heroku ps --app utkarsh-appointment-system

# Monitor database
heroku pg:info --app utkarsh-appointment-system
```

---

## üéØ Success Criteria

### All Tests Must Pass:
1. ‚úÖ Health endpoint returns UP status
2. ‚úÖ User registration works for all roles
3. ‚úÖ JWT authentication successful
4. ‚úÖ Available slots API accessible without auth
5. ‚úÖ Appointment booking works with valid token
6. ‚úÖ Role-based access properly enforced
7. ‚úÖ Database operations persist correctly
8. ‚úÖ Error handling graceful and informative

### Performance Benchmarks:
- üöÄ First request (cold start): < 15 seconds
- ‚ö° Subsequent requests: < 5 seconds
- üíæ Database operations: < 2 seconds
- üîí Authentication: < 3 seconds

---

## üìû Production Support

### If Tests Fail:
1. Check Heroku logs: `heroku logs --tail`
2. Verify environment variables: `heroku config`
3. Check database connectivity: `heroku pg:info`
4. Restart if needed: `heroku restart`

Your appointment system is now production-ready with comprehensive testing coverage!
