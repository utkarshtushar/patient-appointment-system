# Patient Appointment System - API Testing Guide for Render.com

## Deployment Information
- **Platform**: Render.com (Free Tier)
- **Database**: H2 File-based Database (Persistent)
- **External Services**: Disabled (Redis, RabbitMQ) for free deployment
- **Production URL**: https://your-app-name.onrender.com

## Pre-Testing Setup

### 1. Environment Variables
Replace `{BASE_URL}` with your actual Render.com URL:
```
BASE_URL=https://your-app-name.onrender.com
```

### 2. Required Headers for Testing
```
Content-Type: application/json
Authorization: Bearer {JWT_TOKEN}  # For authenticated endpoints
```

## Testing Workflow

### Phase 1: Basic Connectivity Tests

1. **Test Home Page**
   ```bash
   curl -X GET "{BASE_URL}/"
   ```
   Expected: "Patient Appointment System is running successfully!"

2. **Test Health Check**
   ```bash
   curl -X GET "{BASE_URL}/actuator/health"
   ```
   Expected: {"status":"UP","components":{"db":{"status":"UP"}}}

3. **Test API Endpoint**
   ```bash
   curl -X GET "{BASE_URL}/api/test"
   ```
   Expected: "API endpoints are working!"

### Phase 2: Authentication Testing

4. **Register Patient User**
   ```bash
   curl -X POST "{BASE_URL}/api/auth/register" \
     -H "Content-Type: application/json" \
     -d '{
       "email": "test.patient@example.com",
       "password": "test123",
       "firstName": "Test",
       "lastName": "Patient",
       "phoneNumber": "+1234567890",
       "role": "PATIENT"
     }'
   ```

5. **Register Doctor User**
   ```bash
   curl -X POST "{BASE_URL}/api/auth/register" \
     -H "Content-Type: application/json" \
     -d '{
       "email": "test.doctor@example.com",
       "password": "test123",
       "firstName": "Dr. Test",
       "lastName": "Doctor",
       "phoneNumber": "+1234567891",
       "role": "DOCTOR",
       "specialization": "General Medicine"
     }'
   ```

6. **Login as Patient**
   ```bash
   curl -X POST "{BASE_URL}/api/auth/login" \
     -H "Content-Type: application/json" \
     -d '{
       "email": "test.patient@example.com",
       "password": "test123"
     }'
   ```
   Save the JWT token from response for next tests.

7. **Login as Doctor**
   ```bash
   curl -X POST "{BASE_URL}/api/auth/login" \
     -H "Content-Type: application/json" \
     -d '{
       "email": "test.doctor@example.com",
       "password": "test123"
     }'
   ```

### Phase 3: User Management Testing

8. **Get Users by Role (Requires Authentication)**

9. **Get All Doctors**
   ```bash
   curl -X GET "{BASE_URL}/api/users?role=DOCTOR" \
     -H "Authorization: Bearer {JWT_TOKEN}" \
     -H "Content-Type: application/json"
   ```
   Expected: Array of doctor user objects with specialization and licenseNumber

10. **Get All Patients**
    ```bash
    curl -X GET "{BASE_URL}/api/users?role=PATIENT" \
      -H "Authorization: Bearer {JWT_TOKEN}" \
      -H "Content-Type: application/json"
    ```
    Expected: Array of patient user objects

11. **Get All Admins**
    ```bash
    curl -X GET "{BASE_URL}/api/users?role=ADMIN" \
      -H "Authorization: Bearer {JWT_TOKEN}" \
      -H "Content-Type: application/json"
    ```
    Expected: Array of admin user objects

### Phase 4: Appointment System Testing

12. **Get Available Slots (PUBLIC - No Authentication Required)**
    ```bash
    curl -X GET "{BASE_URL}/api/public/slots/available?doctorId=1&startDate=2025-09-10&endDate=2025-09-15" \
      -H "Content-Type: application/json"
    ```
    Expected: Array of available appointment slots

13. **Book Appointment (Patient Auth Required)**
   ```bash
   curl -X POST "{BASE_URL}/api/appointments/book" \
     -H "Content-Type: application/json" \
     -H "Authorization: Bearer {PATIENT_JWT_TOKEN}" \
     -d '{
       "slotId": 1,
       "patientNotes": "Regular health checkup"
     }'
   ```

14. **Get Patient Appointments**
    ```bash
    curl -X GET "{BASE_URL}/api/appointments/patient/my-appointments" \
      -H "Authorization: Bearer {PATIENT_JWT_TOKEN}"
    ```

15. **Get Doctor Appointments**
    ```bash
    curl -X GET "{BASE_URL}/api/appointments/doctor/my-appointments" \
      -H "Authorization: Bearer {DOCTOR_JWT_TOKEN}"
    ```

16. **Cancel Appointment**
    ```bash
    curl -X PUT "{BASE_URL}/api/appointments/{appointmentId}/cancel" \
      -H "Authorization: Bearer {PATIENT_JWT_TOKEN}"
    ```

### Phase 5: Error Testing

17. **Test Unauthorized Access**
    ```bash
    curl -X GET "{BASE_URL}/api/appointments/patient/my-appointments"
    ```
    Expected: 401 Unauthorized

18. **Test Invalid Login**
    ```bash
    curl -X POST "{BASE_URL}/api/auth/login" \
      -H "Content-Type: application/json" \
      -d '{
        "email": "invalid@example.com",
        "password": "wrongpassword"
      }'
    ```
    Expected: 401 Unauthorized

19. **Test Duplicate Registration**
    ```bash
    curl -X POST "{BASE_URL}/api/auth/register" \
      -H "Content-Type: application/json" \
      -d '{
        "email": "test.patient@example.com",
        "password": "test123",
        "firstName": "Duplicate",
        "lastName": "User",
        "phoneNumber": "+1234567892",
        "role": "PATIENT"
      }'
    ```
    Expected: 400 Bad Request (Email already exists)

## Production Verification Checklist

### ✅ Basic Functionality
- [ ] Application starts successfully
- [ ] Health check returns UP status
- [ ] Database connection is working
- [ ] Home page loads correctly

### ✅ Authentication System
- [ ] User registration works for all roles (PATIENT, DOCTOR, ADMIN)
- [ ] User login returns valid JWT token
- [ ] JWT token validation works
- [ ] Role-based access control is enforced

### ✅ Appointment System
- [ ] Available slots can be retrieved without authentication
- [ ] Patients can book appointments with valid JWT token
- [ ] Doctors can view their appointments
- [ ] Patients can view their appointments
- [ ] Appointments can be cancelled

### ✅ Security Features
- [ ] Unauthorized requests are rejected (401)
- [ ] Invalid JWT tokens are rejected
- [ ] Role restrictions are enforced
- [ ] Sensitive endpoints require authentication

### ✅ Error Handling
- [ ] Invalid requests return appropriate error codes
- [ ] Duplicate registrations are prevented
- [ ] Database constraints are enforced
- [ ] Error messages are informative but not revealing

## Common Issues and Solutions

### Issue 1: 503 Service Unavailable
**Cause**: Render.com free tier service is sleeping
**Solution**: Wait 30-60 seconds for service to wake up, then retry

### Issue 2: Database Connection Errors
**Cause**: H2 database file not accessible
**Solution**: Check if data directory exists and has write permissions

### Issue 3: JWT Token Expired
**Cause**: Token has 24-hour expiration
**Solution**: Login again to get a new token

### Issue 4: CORS Errors (if accessing from browser)
**Cause**: Cross-origin requests blocked
**Solution**: Use server-side requests or configure CORS in application

## Performance Testing

### Load Testing Commands
```bash
# Test concurrent registrations
for i in {1..10}; do
  curl -X POST "{BASE_URL}/api/auth/register" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"user$i@example.com\",\"password\":\"test123\",\"firstName\":\"User$i\",\"lastName\":\"Test\",\"phoneNumber\":\"+123456789$i\",\"role\":\"PATIENT\"}" &
done
wait

# Test concurrent logins
for i in {1..10}; do
  curl -X POST "{BASE_URL}/api/auth/login" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"user$i@example.com\",\"password\":\"test123\"}" &
done
wait
```

## Monitoring and Logs

### Check Application Status
```bash
# Health check
curl -X GET "{BASE_URL}/actuator/health"

# Application info
curl -X GET "{BASE_URL}/actuator/info"

# Metrics (if enabled)
curl -X GET "{BASE_URL}/actuator/metrics"
```

### Render.com Specific Commands
```bash
# View application logs (if using Render CLI)
render logs -f your-app-name

# Check service status
render services list

# View deployment history
render deploys list your-app-name
```

## Final Production Test Script

```bash
#!/bin/bash
# Complete production test script for Render.com

BASE_URL="https://your-app-name.onrender.com"

echo "🚀 Starting production tests for Patient Appointment System on Render.com"

# Test 1: Basic connectivity
echo "📡 Testing basic connectivity..."
curl -X GET "$BASE_URL/" || echo "❌ Home page failed"
curl -X GET "$BASE_URL/actuator/health" || echo "❌ Health check failed"

# Test 2: User registration
echo "👤 Testing user registration..."
curl -X POST "$BASE_URL/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{"email":"prod.test@example.com","password":"test123","firstName":"Prod","lastName":"Test","phoneNumber":"+1234567890","role":"PATIENT"}' \
  || echo "❌ Patient registration failed"

# Test 3: User login
echo "🔐 Testing user login..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"email":"prod.test@example.com","password":"test123"}')

TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)

if [ -n "$TOKEN" ]; then
  echo "✅ Login successful, token received"

  # Test 4: Protected endpoint
  echo "🛡️ Testing protected endpoint..."
  curl -X GET "$BASE_URL/api/appointments/patient/my-appointments" \
    -H "Authorization: Bearer $TOKEN" || echo "❌ Protected endpoint failed"
else
  echo "❌ Login failed, no token received"
fi

echo "🎉 Production tests completed!"
```

## Render.com Deployment Steps

1. **Connect GitHub Repository**
   - Go to Render.com dashboard
   - Click "New +" -> "Web Service"
   - Connect your GitHub repository
   - Select branch: main

2. **Configure Build Settings**
   - Build Command: `./mvnw clean package -DskipTests`
   - Start Command: `java -jar target/patient-appointment-system-1.0.0.jar`

3. **Set Environment Variables**
   - `SPRING_PROFILES_ACTIVE`: `production`
   - `JWT_SECRET`: `your-secure-jwt-secret-key`
   - `PORT`: `8080` (auto-set by Render)

4. **Deploy and Monitor**
   - Click "Create Web Service"
   - Monitor build logs
   - Test endpoints once deployment is complete

## Success Criteria

✅ **Deployment Successful** if all these tests pass:
- Health check returns {"status":"UP"}
- User can register and login
- JWT token is generated and validated
- Patient can book appointments
- Doctor can view appointments
- All API endpoints respond correctly
- No 500 errors in normal operations
