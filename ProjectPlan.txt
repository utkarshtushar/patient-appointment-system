Patient Appointment Booking System - Project Plan
This document outlines the detailed plan for a patient appointment booking system with a backend built using Java Spring Boot. The system is designed to provide a web-based platform for patients to book appointments with doctors. The architecture is focused on ensuring time slot uniqueness, real-time scheduling, and timely notifications. All components are selected to be deployed within a completely free environment.


Core Features & Functionality
The system will include the following key features:

User Management: Patients and doctors can register and log in to the system. An admin panel will be available for managing users and viewing analytics.

Doctor Schedule Management: Doctors can define their available days and time ranges, which are stored in a DoctorSchedule database table.

Automated Slot Generation: A cron job runs nightly to automatically generate appointment slots for a specified number of upcoming days. This process respects the doctors' availability as defined in the database.

Appointment Booking: The booking process is designed to prevent conflicts. When a patient requests a slot, the request is sent to a queue system (RabbitMQ or Redis Streams). Mutex locking is used with Redisson for distributed Redis locking to ensure that only one booking can occur for a specific time slot at a time.

Reminders: A scheduled task or cron job checks for upcoming appointments every minute and sends a reminder five minutes before the appointment. These notifications can be sent via email using JavaMailSender or via SMS/push notifications using APIs like Twilio or Firebase Cloud Messaging.

Technologies and Tools
The project leverages a range of free-tier technologies to keep costs at zero:

Backend: The backend is built on Java 17+ and Spring Boot. It uses Spring Data JPA with Hibernate for database interactions and Spring Security with JWT for authentication. Spring Scheduler handles cron jobs and reminders.

Database: PostgreSQL is the chosen database, with free tiers available from Railway or Supabase.

Queue System: A queue is implemented using either RabbitMQ (via CloudAMQP's free plan) or Redis Streams (via Upstash's free tier) to manage booking requests.

Locking: Redisson is used for distributed locking with Redis, utilizing the free tier from Upstash.

Deployment: The application can be hosted on free platforms like Render, Railway, or Fly.io. 

GitHub Actions will be used for continuous integration and continuous deployment (CI/CD).

Simplified Database Schema
The database design includes the following key tables:

Users: Stores information for patients and doctors, including their role.
DoctorSchedule: Stores the availability of each doctor.
AppointmentSlot: Contains all the generated time slots and their booking status (is_booked).
Appointments: Records confirmed appointments, linking the doctor and patient with the appointment date, time, and status.
NotificationQueue: An optional table to manage reminder notifications, storing details like the appointment ID and notification time.

Development Roadmap
The project is structured into six development phases:


Phase 1: Setup & Auth: Initialize the Spring Boot project and configure the PostgreSQL database with JPA. Implement user registration and login with JWT-based authentication for both patients and doctors.
Phase 2: Doctor Schedule & Slot Generation: Build the APIs for doctors to manage their schedules and implement the cron job to automatically generate slots based on this data.
Phase 3: Appointment Booking: Set up Redis for distributed locking and integrate a booking service that uses the queue system to handle requests and ensure time slot uniqueness.
Phase 4: Reminder System: Create the scheduler to check for and send reminders five minutes before appointments, and configure the chosen notification service (JavaMailSender or Twilio).
Phase 5: Frontend & Admin Dashboard: (Optional) Develop a user interface using a technology like React or Thymeleaf and build a basic admin dashboard with analytics on bookings.
Phase 6: Deployment: Deploy the backend application and all supporting services (PostgreSQL, Redis, CI/CD) on the chosen free hosting platforms.

